{"file":"/Users/davidgarcia/davidlocal/UTP/utptestdavid/__tests__/DetailScreen.test.tsx","mappings":";;;;;AACA,4FAAoE,CAAA,oBAAoB;AAGxF,kDAA0B;AAC1B,gEAAgE;AAEhE,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;IAC5B,IAAI,CAAC,yBAAyB,EAAE,KAAK,IAAI,EAAE;QACzC,MAAM,IAAI,GAAG;YACX,KAAK,EAAE,+BAA+B;YACtC,IAAI,EAAE,WAAW;SAClB,CAAC;QAEF,MAAM,EAAE,WAAW,EAAE,GAAG,IAAA,qBAAM,EAAC,CAAC,sBAAY,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,EAAE,EAAE,IAAI,EAAE,EAAE,CAAC,EAAG,CAAC,CAAC;QAC9E,MAAM,YAAY,GAAG,WAAW,CAAC,YAAY,CAAC,CAAC;QAE/C,qDAAqD;QACrD,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC;QACjD,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;QAE9E,oCAAoC;QACpC,MAAM,IAAA,sBAAO,EAAC,GAAG,EAAE;YACjB,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;QAEH,yEAAyE;QACzE,MAAM,CAAC,WAAW,CAAC,cAAc,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QAChD,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC;IAEH,IAAI,CAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;QAChE,MAAM,IAAI,GAAG;YACX,KAAK,EAAE,aAAa;YACpB,IAAI,EAAE,WAAW;SAClB,CAAC;QAEF,MAAM,EAAE,WAAW,EAAE,GAAG,IAAA,qBAAM,EAAC,CAAC,sBAAY,CAAC,KAAK,CAAC,CAAC,EAAE,MAAM,EAAE,EAAE,IAAI,EAAE,EAAE,CAAC,EAAG,CAAC,CAAC;QAE9E,+CAA+C;QAC/C,MAAM,IAAA,sBAAO,EAAC,GAAG,EAAE;YACjB,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC;YAC/C,MAAM,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;QAChF,CAAC,CAAC,CAAC;QAEH,wCAAwC;QACxC,MAAM,CAAC,GAAG,EAAE,CAAC,WAAW,CAAC,YAAY,CAAC,CAAC,CAAC,YAAY,EAAE,CAAC;IACzD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/davidgarcia/davidlocal/UTP/utptestdavid/__tests__/DetailScreen.test.tsx"],"sourcesContent":[" \nimport DetailScreen from  '../src/presentation/screens/DetailScreen'// './DetailScreen';\n \n\nimport React from 'react';\nimport { render, waitFor } from '@testing-library/react-native';\n \ndescribe('DetailScreen', () => {\n  test('renders image correctly', async () => {\n    const ship = {\n      image: 'https://example.com/image.jpg',\n      name: 'Ship Name',\n    };\n\n    const { getByTestId } = render(<DetailScreen route={{ params: { ship } }} />);\n    const imageElement = getByTestId('ship-image');\n\n    // Verificar que la imagen estÃ© cargando inicialmente\n    expect(getByTestId('loading-text')).toBeTruthy();\n    expect(getByTestId('loading-text').props.children).toBe('Imagen cargando...');\n\n    // Esperar a que la imagen se cargue\n    await waitFor(() => {\n      expect(imageElement.props.source.uri).toBe(ship.image);\n    });\n\n    // Verificar que la imagen se haya cargado y no muestre el texto de carga\n    expect(getByTestId('loading-text')).toBeFalsy();\n    expect(imageElement.props.source.uri).toBe(ship.image);\n  });\n\n  test('renders error message when image fails to load', async () => {\n    const ship = {\n      image: 'invalid-url',\n      name: 'Ship Name',\n    };\n\n    const { getByTestId } = render(<DetailScreen route={{ params: { ship } }} />);\n\n    // Verificar que se muestre el mensaje de error\n    await waitFor(() => {\n      expect(getByTestId('error-text')).toBeTruthy();\n      expect(getByTestId('error-text').props.children).toBe('Error en la carga...');\n    });\n\n    // Verificar que no se muestre la imagen\n    expect(() => getByTestId('ship-image')).toThrowError();\n  });\n});\n"],"version":3}