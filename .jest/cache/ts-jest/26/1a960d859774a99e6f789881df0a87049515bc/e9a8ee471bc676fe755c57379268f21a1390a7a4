[["/Users/davidgarcia/davidlocal/UTP/utptestdavid/__tests__/DetailScreen.test.tsx",{"fileContent":" \nimport DetailScreen from  '../src/presentation/screens/DetailScreen'// './DetailScreen';\n \n\nimport React from 'react';\nimport { render, waitFor } from '@testing-library/react-native';\n \ndescribe('DetailScreen', () => {\n  test('renders image correctly', async () => {\n    const ship = {\n      image: 'https://example.com/image.jpg',\n      name: 'Ship Name',\n    };\n\n    const { getByTestId } = render(<DetailScreen route={{ params: { ship } }} />);\n    const imageElement = getByTestId('ship-image');\n\n    // Verificar que la imagen estÃ© cargando inicialmente\n    expect(getByTestId('loading-text')).toBeTruthy();\n    expect(getByTestId('loading-text').props.children).toBe('Imagen cargando...');\n\n    // Esperar a que la imagen se cargue\n    await waitFor(() => {\n      expect(imageElement.props.source.uri).toBe(ship.image);\n    });\n\n    // Verificar que la imagen se haya cargado y no muestre el texto de carga\n    expect(getByTestId('loading-text')).toBeFalsy();\n    expect(imageElement.props.source.uri).toBe(ship.image);\n  });\n\n  test('renders error message when image fails to load', async () => {\n    const ship = {\n      image: 'invalid-url',\n      name: 'Ship Name',\n    };\n\n    const { getByTestId } = render(<DetailScreen route={{ params: { ship } }} />);\n\n    // Verificar que se muestre el mensaje de error\n    await waitFor(() => {\n      expect(getByTestId('error-text')).toBeTruthy();\n      expect(getByTestId('error-text').props.children).toBe('Error en la carga...');\n    });\n\n    // Verificar que no se muestre la imagen\n    expect(() => getByTestId('ship-image')).toThrowError();\n  });\n});\n","resolvedModuleNames":["/Users/davidgarcia/davidlocal/UTP/utptestdavid/src/presentation/screens/DetailScreen.tsx","/Users/davidgarcia/davidlocal/UTP/utptestdavid/src/domain/models.ts"]}]]